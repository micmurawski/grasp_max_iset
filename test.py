from algorithms import *
if __name__== '__main__':
    N=12
    M=10
    sizes_of_graph = np.array([x for x in range(0,N)])
    sizes_of_iset = np.array([0.0 for x in range(N)])
    sizes_of_iset2 = np.array([0.0 for x in range(N)])
    t = np.zeros(N)
    t2 = np.zeros(N)
    for i in sizes_of_graph:
        graph = nx.erdos_renyi_graph(2**i,0.6)
        start = time.time()
        iset = grasp(graph, 100, greedy=get_iset_by_adding_nodes, with_local_search=False, pick_random=True, stop=5000)
        end = time.time()
        start2 = time.time()
        iset2 = grasp(graph, 100, greedy=get_iset_by_removing_nodes, with_local_search=False, pick_random=True, stop=5000)
        end2 = time.time()
        t[i] += (end - start)
        t2[i] += (end2 - start2)
        sizes_of_iset[i]+=len(iset)
        sizes_of_iset2[i]+=len(iset2)
        print(t)
        print(t2)
        print(sizes_of_iset)
        print(sizes_of_iset2)
        print(2**i)
        print(i)
    plt.plot(np.power(2,sizes_of_graph), t,color='orange', label='Dodawanie')
    plt.plot(np.power(2,sizes_of_graph), t2,'b-', label='Odejmowanie')
    plt.legend()
    plt.grid()
    plt.show()
    print(t)
    print(t2)
    print(sizes_of_iset)